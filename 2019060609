[1mdiff --git a/Readme.txt b/Readme.txt[m
[1mindex a284a72..bdad28d 100644[m
[1m--- a/Readme.txt[m
[1m+++ b/Readme.txt[m
[36m@@ -1 +1,167 @@[m
[31m-绝望[m
\ No newline at end of file[m
[32m+[m[32mGit学习笔记[m
[32m+[m
[32m+[m[32m学习记录：[m
[32m+[m
[32m+[m	[32mhttps://git-scm.com/docs[m
[32m+[m
[32m+[m	[32mhttps://www.runoob.com/manual/github-git-cheat-sheet.pdf[m
[32m+[m
[32m+[m	[32mhttps://www.runoob.com/git/git-tutorial.html[m
[32m+[m
[32m+[m[32m解释区[m
[32m+[m[41m	[m
[32m+[m	[32mGit 与 SVN 区别点：[m
[32m+[m
[32m+[m		[32m1、Git 是分布式的，SVN 不是：这是 Git 和其它非分布式的版本控制系统，例如 SVN，CVS 等，最核心的区别。[m
[32m+[m
[32m+[m		[32m2、Git 把内容按元数据方式存储，而 SVN 是按文件：所有的资源控制系统都是把文件的元信息隐藏在一个类似 .svn、.cvs 等的文件夹里。[m
[32m+[m
[32m+[m		[32m3、Git 分支和 SVN 的分支不同：分支在 SVN 中一点都不特别，其实它就是版本库中的另外一个目录。[m
[32m+[m
[32m+[m		[32m4、Git 没有一个全局的版本号，而 SVN 有：目前为止这是跟 SVN 相比 Git 缺少的最大的一个特征。[m
[32m+[m
[32m+[m		[32m5、Git 的内容完整性要优于 SVN：Git 的内容存储使用的是 SHA-1 哈希算法。这能确保代码内容的完整性，确保在遇到磁盘故障和网络问题时降低对版本库的破坏。[m
[32m+[m
[32m+[m	[32mGit 的工作就是创建和保存你的项目的快照及与之后的快照进行对比。[m
[32m+[m[41m	[m
[32m+[m	[32mmaster一般指主动发起请求的一方[m
[32m+[m
[32m+[m	[32mworker顾名思义工作者或任务对象[m
[32m+[m
[32m+[m	[32mGIT使用SHA1算法，40个十六进制字符[m
[32m+[m
[32m+[m	[32mVCS，版本控制系统。版本控制系统（version control system）,是一种记录一个或若干文件内容变化，以便将来查阅特定版本修订情况的系统。版本控制系统不仅可以应用于软件源代码的文本文件，而且可以对任何类型的文件进行版本控制[m
[32m+[m	[32mGIT内只有三种状态：已提交（committed），已修改（modified）和已暂存（staged）。[m
[32m+[m	[32m已提交表示该文件已经被安全地保存在本地数据库中了；[m
[32m+[m	[32m已修改表示修改了某个文件，但还没有提交保存；[m
[32m+[m	[32m已暂存表示把已修改的文件放在下次提交时要保存的清单中。[m
[32m+[m
[32m+[m[32m安装区[m
[32m+[m
[32m+[m	[32mgit clone 出来的，.git[m
[32m+[m	[32mgit clone --bare, 新建目录本身[m
[32m+[m
[32m+[m	[32m安装依赖(curl, zlib, openssl, expat, libiconv)[m
[32m+[m	[32m$ yum install curl-devel expat-devel gettext-devel\openssl-devel zlib-devel[m
[32m+[m	[32m$ apt-get install libcurl4-gnutls-dev libexpat1-dev gettext\libz-dev libssl-dev[m
[32m+[m
[32m+[m	[32m源代码[m
[32m+[m	[32mhttp://git-scm.com/download[m
[32m+[m
[32m+[m	[32m编译并安装[m
[32m+[m	[32m$ tar -zxf git-1.7.2.2.tar.gz[m
[32m+[m	[32m$ cd git-1.7.2.2[m
[32m+[m	[32m$ make prefix=/usr/local all[m
[32m+[m	[32m$ sudo make prefix=/usr/local install[m
[32m+[m
[32m+[m	[32m把Git项目仓库克隆到本地，以便日后随时更新：[m
[32m+[m	[32m$ git clone git://git.kernel.org/pub/scm/git/git.git[m
[32m+[m
[32m+[m	[32mWindows上安装[m
[32m+[m	[32mhttp://msysgit.github.com/[m
[32m+[m
[32m+[m[32m配置区[m
[32m+[m
[32m+[m	[32m$ git config[m
[32m+[m[41m	[m
[32m+[m	[32m$ git config --global user.name "John Doe"[m
[32m+[m	[32m$ git config --global user.email johndoe@example.com[m
[32m+[m[41m	[m
[32m+[m	[32m如果用了 --global 选项，那么更改的配置文件就是位于你用户主目录下的那个，以后你所有的项目都会默认使用这里配置的用户信息。[m
[32m+[m	[32m如果要在某个特定的项目中使用其他名字或者电邮，只要去掉 --global 选项重新配置即可，新的设定保存在当前项目的 .git/config 文件里。[m
[32m+[m[41m	[m
[32m+[m	[32m需要输入一些额外消息的时候[m
[32m+[m	[32m$ git config --global core.editor emacs[m
[32m+[m[41m	[m
[32m+[m	[32m在解决合并冲突时使用哪种差异分析工具[m
[32m+[m	[32m$ git config --global merge.tool vimdiff[m
[32m+[m[41m	[m
[32m+[m	[32m查看配置信息[m
[32m+[m	[32m$ git config --list[m
[32m+[m[41m	[m
[32m+[m	[32m查看已配置的用户名[m
[32m+[m	[32m$ git config user.name[m
[32m+[m
[32m+[m[32m获取帮助[m
[32m+[m
[32m+[m	[32m$ git help <verb>[m
[32m+[m	[32m$ git <verb> --help[m
[32m+[m	[32m$ man git-<verb>[m
[32m+[m[41m	[m
[32m+[m[32m仓库[m
[32m+[m
[32m+[m	[32m在工作目录中初始化新仓库[m
[32m+[m	[32m要对现有的某个项目开始用Git管理，只需到此项目所在的目录，执行：[m
[32m+[m	[32m$ git init[m
[32m+[m[41m	[m
[32m+[m	[32m使用我们指定目录作为Git仓库。[m
[32m+[m	[32m$ git init newrepo[m
[32m+[m[41m	[m
[32m+[m	[32mgit add 命令可将该文件添加到缓存[m
[32m+[m	[32m如果当前目录下有几个文件想要纳入版本控制，需要先用 git add 命令告诉 Git 开始对这些文件进行跟踪，然后提交：[m
[32m+[m	[32m$ git add *.c[m
[32m+[m	[32m$ git add README[m
[32m+[m	[32m$ git commit -m 'initial project version'[m
[32m+[m[41m	[m
[32m+[m[41m	[m
[32m+[m	[32m克隆仓库的命令格式为 git clone [url][m
[32m+[m	[32m我们使用 git clone 从现有 Git 仓库中拷贝项目（类似 svn checkout）。[m
[32m+[m
[32m+[m	[32m克隆仓库的命令格式为：[m
[32m+[m	[32mgit clone <repo>[m
[32m+[m	[32m在当前目录下创建一个名为grit的目录[m
[32m+[m	[32m$ git clone git://github.com/schacon/grit.git[m
[32m+[m[41m	[m
[32m+[m[41m	[m
[32m+[m	[32m如果我们需要克隆到指定的目录，可以使用以下命令格式：[m
[32m+[m	[32mgit clone <repo> <directory>[m
[32m+[m	[32m新建的目录成了 mygrit，其他的都和上边的一样。[m
[32m+[m	[32m$ git clone git://github.com/schacon/grit.git mygrit[m
[32m+[m[41m	[m
[32m+[m	[32mrepo:Git 仓库。[m
[32m+[m	[32mdirectory:本地目录。[m
[32m+[m[41m	[m
[32m+[m[41m	[m
[32m+[m	[32mgit clone 时，可以所用不同的协议，包括 ssh, git, https 等，其中最常用的是 ssh，因为速度较快，还可以配置公钥免输入密码。各种写法如下：[m
[32m+[m
[32m+[m	[32mgit clone git@github.com:fsliurujie/test.git         --SSH协议[m
[32m+[m	[32mgit clone git://github.com/fsliurujie/test.git          --GIT协议[m
[32m+[m	[32mgit clone https://github.com/fsliurujie/test.git      --HTTPS协议[m
[32m+[m[41m	[m
[32m+[m[32m当执行[m
[32m+[m
[32m+[m	[32m当执行提交操作（git commit）时，暂存区的目录树写到版本库（对象库）中，master 分支会做相应的更新。即 master 指向的目录树就是提交时暂存区的目录树。[m
[32m+[m	[32m$ git commit[m
[32m+[m[41m	[m
[32m+[m	[32m当执行 "git reset HEAD" 命令时，暂存区的目录树会被重写，被 master 分支指向的目录树所替换，但是工作区不受影响。[m
[32m+[m	[32m$ git reset HEAD[m
[32m+[m[41m	[m
[32m+[m	[32m当执行 "git rm --cached <file>" 命令时，会直接从暂存区删除文件，工作区则不做出改变。[m
[32m+[m	[32m$ git rm --cached <file>[m
[32m+[m[41m	[m
[32m+[m	[32m当执行 "git checkout ." 或者 "git checkout -- <file>" 命令时，会用暂存区全部或指定的文件替换工作区的文件。这个操作很危险，会清除工作区中未添加到暂存区的改动。[m
[32m+[m	[32m$ git checkout .[m
[32m+[m
[32m+[m	[32m当执行 "git checkout HEAD ." 或者 "git checkout HEAD <file>" 命令时，会用 HEAD 指向的 master 分支中的全部或者部分文件替换暂存区和以及工作区中的文件。这个命令也是极具危险性的，因为不但会清除工作区中未提交的改动，也会清除暂存区中未提交的改动。[m
[32m+[m	[32m$ git checkout HEAD .[m
[32m+[m
[32m+[m
[32m+[m[32m提交修改[m
[32m+[m
[32m+[m	[32m以查看在你上次提交之后是否有修改[m
[32m+[m	[32m$ git status[m
[32m+[m[41m	[m
[32m+[m	[32m$ git status -s[m
[32m+[m[41m	[m
[32m+[m		[32mChanges to be committed 已经提交到缓存| 快照[m
[32m+[m		[32mAM MM M A[m
[32m+[m		[32m出现红色即还未提交[m
[32m+[m		[32m出现绿色即已经提交[m
[32m+[m		[32m红绿相加即提交后又进行了再次修改[m
[32m+[m
[32m+[m	[32m查看git status的结果的详细信息[m
[32m+[m	[32m$ git diff[m
[41m+	[m
[41m+	[m
[41m+	[m
[41m+	[m
\ No newline at end of file[m
