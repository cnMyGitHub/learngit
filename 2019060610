[1mdiff --git a/Readme.txt b/Readme.txt[m
[1mindex 2677340..7cd27d4 100644[m
[1m--- a/Readme.txt[m
[1m+++ b/Readme.txt[m
[36m@@ -82,6 +82,11 @@[m [mGit学习笔记[m
 	查看已配置的用户名[m
 	$ git config user.name[m
 [m
[32m+[m	[32m设置远端仓库地址[m
[32m+[m	[32mgit remote set-url origin 你的远端地址[m[41m [m
[32m+[m[41m	[m
[32m+[m[41m	[m
[32m+[m[41m	[m
 获取帮助[m
 [m
 	$ git help <verb>[m
[36m@@ -97,7 +102,7 @@[m [mGit学习笔记[m
 	使用我们指定目录作为Git仓库。[m
 	$ git init newrepo[m
 	[m
[31m-	git add 命令可将该文件添加到缓存[m
[32m+[m	[32mgit add 命令可将该文件添加到缓存| 快照|暂存区[m
 	如果当前目录下有几个文件想要纳入版本控制，需要先用 git add 命令告诉 Git 开始对这些文件进行跟踪，然后提交：[m
 	$ git add *.c[m
 	$ git add README[m
[36m@@ -122,6 +127,14 @@[m [mGit学习笔记[m
 	directory:本地目录。[m
 	[m
 	[m
[32m+[m	[32mgit clone 时，可以所用不同的协议，包括 ssh, git, https 等，其中最常用的是 ssh，因为速度较快，还可以配置公钥免输入密码。各种写法如下：[m
[32m+[m
[32m+[m	[32mgit clone git@github.com:fsliurujie/test.git         --SSH协议[m
[32m+[m	[32mgit clone git://github.com/fsliurujie/test.git          --GIT协议[m
[32m+[m	[32mgit clone https://github.com/fsliurujie/test.git      --HTTPS协议[m
[32m+[m[41m	[m
[32m+[m[32m当执行[m
[32m+[m
 	当执行提交操作（git commit）时，暂存区的目录树写到版本库（对象库）中，master 分支会做相应的更新。即 master 指向的目录树就是提交时暂存区的目录树。[m
 	$ git commit[m
 	[m
[36m@@ -136,20 +149,29 @@[m [mGit学习笔记[m
 [m
 	当执行 "git checkout HEAD ." 或者 "git checkout HEAD <file>" 命令时，会用 HEAD 指向的 master 分支中的全部或者部分文件替换暂存区和以及工作区中的文件。这个命令也是极具危险性的，因为不但会清除工作区中未提交的改动，也会清除暂存区中未提交的改动。[m
 	$ git checkout HEAD .[m
[31m-	[m
[31m-	[m
[31m-	git clone 时，可以所用不同的协议，包括 ssh, git, https 等，其中最常用的是 ssh，因为速度较快，还可以配置公钥免输入密码。各种写法如下：[m
 [m
[31m-	git clone git@github.com:fsliurujie/test.git         --SSH协议[m
[31m-	git clone git://github.com/fsliurujie/test.git          --GIT协议[m
[31m-	git clone https://github.com/fsliurujie/test.git      --HTTPS协议[m
[31m-	[m
[32m+[m
[32m+[m[32m提交修改[m
[32m+[m
 	以查看在你上次提交之后是否有修改[m
 	$ git status[m
 	[m
[32m+[m	[32m$ git status -s[m
 	[m
[32m+[m		[32mChanges to be committed 已经提交到缓存| 快照[m
[32m+[m		[32mAM MM M A[m
[32m+[m		[32m出现红色即还未提交[m
[32m+[m		[32m出现绿色即已经提交[m
[32m+[m		[32m红绿相加即提交后又进行了再次修改[m
[32m+[m
[32m+[m	[32m查看git status的结果的详细信息，显示已写入缓存与已修改但尚未写入缓存的改动的区别。git diff 有两个主要的应用场景。[m
[32m+[m	[32m$ git diff[m
 	[m
[31m-	[m
[32m+[m		[32m尚未缓存的改动：git diff[m
[32m+[m		[32m查看已缓存的改动： git diff --cached[m
[32m+[m		[32m查看已缓存的与未缓存的所有改动：git diff HEAD[m
[32m+[m		[32m显示摘要而非整个 diff：git diff --stat[m
[32m+[m[41m		[m
 	[m
 	[m
 	[m
